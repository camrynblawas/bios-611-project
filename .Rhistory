gsub("_+$","")
}
df <- as.data.frame(lapply(df, simplify))
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
simplify <- function(s){
s %>%
tolower() %>%
trimws() %>%
gsub("[^a-z1-9]+","_") %>%
gsub("^_+","") %>%
gsub("_+$","")
}
df <- as.data.frame(lapply(df, simplify))
df <- character_data
try<- tolower(df)
?tolower
tolower(df)
library(readr)
gradebook_export_aa0ab525_8c9b_46c6_a1ed_71b23e38f45a_4_ <- read_csv("C:/Users/Camryn/Downloads/gradebook_export-aa0ab525-8c9b-46c6-a1ed-71b23e38f45a (4).csv")
View(gradebook_export_aa0ab525_8c9b_46c6_a1ed_71b23e38f45a_4_)
df <- read.csv("C:/Users/Camryn/Downloads/gradebook_export-aa0ab525-8c9b-46c6-a1ed-71b23e38f45a (4).csv")
df <- select(df, PID, Midterm.1..100.)
library(dplyr)
library(ggplot2)
df <- select(df, PID, Midterm.1..100.)
names(df) <- c("PID", "Grade")
ggplot(data=df) + geom_density(x = Grade)
ggplot() + geom_density(data = df, mapping = aes(x = Grade))
ggplot() + geom_bar(data = df, mapping = aes(x = Grade))
ggplot() + geom_col(data = df, mapping = aes(x = Grade))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "pink")) + +
geom_vline(data = df, aes(xintercept=mean(df$Grade),  colour="blue"),
linetype="dashed", size=1)
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "pink")) +
geom_vline(data = df, aes(xintercept=mean(df$Grade),  colour="blue"),
linetype="dashed", size=1)
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "pink")) +
geom_vline( aes(xintercept=mean(df$Grade),  colour="blue"), linetype="dashed", size=1)
geom_vline(aes(xintercept=mean(df$Grade))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "pink")) +
mean(df$Grade)
df$Grade <- as.numeric(df$Grade)
mean(df$Grade)
?mean
View(df)
df <- na.omit(df)
mean(df$Grade)
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "pink")) + geom_vline(aes(xintercept = 79.13303))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, fill = "pink")) + geom_vline(aes(xintercept = 79.13303))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, fill = "pink"), bins = 5) + geom_vline(aes(xintercept = 79.13303))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, fill = "pink"), bins = 6) + geom_vline(aes(xintercept = 79.13303))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, fill = "pink"), bins = 7) + geom_vline(aes(xintercept = 79.13303))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, fill = "pink"), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades"))
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, fill = "pink"), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "black", fill = "cyan"), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot() + geom_histogram(data = df, mapping = aes(x = Grade, color = "black", fill = "#69b3a2"), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df) + geom_histogram(mapping = aes(x = Grade, color = "black", fill = "#69b3a2"), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df) + geom_histogram(mapping = aes(x = Grade, color = "black", fill = "#69b3a2"), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df, mapping = aes(color = "black", fill = "#69b3a2")) + geom_histogram(mapping = aes(x = Grade), bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df) + geom_histogram(mapping = aes(x = Grade), color = "black", fill = "#69b3a2" bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df) + geom_histogram(mapping = aes(x = Grade), color = "black", fill = "#69b3a2", bins = 7) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df) + geom_histogram(mapping = aes(x = Grade), color = "black", fill = "#69b3a2", bins = 8) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggplot(data = df) + geom_histogram(mapping = aes(x = Grade), color = "black", fill = "#69b3a2", bins = 6) + geom_vline(aes(xintercept = 79.13303)) + xlab("Points") + ylab("Number of Students") + ggtitle("MASC 101 Midterm 1 Grades")
ggsave("MASC101Midterm1Grades.png")
data <- rbind(tibble(x=rnorm(100, 3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, -3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, 0, 1),
y=rnorm(100, -3, 1)));
library(tidyverse)
data <- rbind(tibble(x=rnorm(100, 3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, -3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, 0, 1),
y=rnorm(100, -3, 1)));
ggplot(data, aes(x,y)) + geom_point() + coord_equal()
df <- read.csv("~/datasci611/lectures/10-dimensionality-reduction/homework_data.csv")
pca <- prcomp(df)
df <- read.csv("~/datasci611/lectures/10-dimensionality-reduction/homework_data.csv")
pca <- prcomp(df)
summary(pca)
ggplot(pca$x, aes(PC1, PC2)) + geom_point()
library(tidyverse)
data <- as.data.frame(pca$x)
ggplot(data, aes(PC1, PC2)) + geom_point()
plot(df)
reticulate::use_python("C:/Users/Camryn/AppData/Local/Programs/Python/Python310/python.exe")
mfd <- import("sklearn.manifold");
library(tidyverse)
library(rdist)
library(reticulate)
data <- rbind(tibble(x=rnorm(100, 3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, -3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, 0, 1),
y=rnorm(100, -3, 1)));
ggplot(data, aes(x,y)) + geom_point() + coord_equal()
df <- kmeans(data, centers=3)
ggplot(data, aes(x,y)) + geom_point(aes(color=factor(df$cluster)))
library(tidyverse)
library(rdist)
library(reticulate)
data <- rbind(tibble(x=rnorm(100, 3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, -3, 1),
y=rnorm(100, 3, 1)),
tibble(x=rnorm(100, 0, 1),
y=rnorm(100, -3, 1)));
ggplot(data, aes(x,y)) + geom_point() + coord_equal()
df <- kmeans(data, centers=3)
ggplot(data, aes(x,y)) + geom_point(aes(color=factor(df$cluster)))
shannon <- function(tokens){
tbl <- table(tokens);
p <- (tbl %>% as.numeric())/sum(tbl %>% as.numeric());
sum(-p*log(p));
}
mutinf <- function(a,b){
sa <- shannon(a);
sb <- shannon(b);
sab <- shannon(sprintf("%d:%d", a, b));
sa + sb - sab;
}
normalized_mutinf <- function(a,b){
2*mutinf(a,b)/(shannon(a)+shannon(b));
}
numbers <- 2:6
final <- data.frame(matrix(ncol = 3, nrow = 5))
names(final) <- c("clusters", "avgmutinf", "stdev")
for (i in 1:length(numbers)) {
listruns <- c()
for (j in 1:5) {
df <- kmeans(data, centers=numbers[i])
assign(paste("run", i, "_", j, sep = ""), df$cluster)
listruns[j] <- (paste("run", i, "_", j, sep = ""))
}
results <- c()
for(k in 1:length(listruns)){
for(l in 1:length(listruns)){
if(k>l){
results <- c(results, normalized_mutinf(get(listruns[k]), get(listruns[j])));
}
}
}
final$clusters[i] <- numbers[i]
final$avgmutinf[i] <- mean(results)
final$stdev[i] <- sd(results)
}
ggplot(final, aes(clusters, avgmutinf)) + geom_col() + geom_errorbar(aes(x=clusters, ymin=avgmutinf-stdev, ymax=avgmutinf+stdev))
data2 <- rbind(tibble(r=rnorm(100, 3, 0.8),
th=rnorm(100, 3, 0.1)),
tibble(r=rnorm(100, 0, 1.2),
th=rnorm(100, 3*pi/2, 0.1)),
tibble(r=rnorm(400, 6, 0.5),
th=runif(400, 0, 2*pi))) %>%
transmute(x=r*cos(th),y=r*sin(th));
ggplot(data2, aes(x,y)) + geom_point()
distances <- as.matrix(rdist(data2))
distanceslist <- as.tibble(distances[,1,drop=FALSE])
ggplot(distanceslist, aes(`1`)) + geom_density()
similarity <- 1*(distances < 0.5)
reticulate::use_python("C:/Users/Camryn/AppData/Local/Programs/Python/Python310/python.exe")
cluster <- import("sklearn.cluster")
sc <- cluster$SpectralClustering(n_clusters=as.integer(3), affinity="precomputed")
clusters <- sc$fit_predict(similarity)
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(clusters)))
distances <- as.matrix(pdist(data2))
distanceslist <- as.tibble(distances[,1,drop=FALSE])
ggplot(distanceslist, aes(`1`)) + geom_density()
View(distanceslist)
ggplot(distanceslist, aes(V1)) + geom_density()
similarity <- 1*(distances < 0.5)
ggplot(distanceslist, aes(V1)) + geom_density()
cluster <- import("sklearn.cluster")
sc <- cluster$SpectralClustering(n_clusters=as.integer(3), affinity="precomputed")
clusters <- sc$fit_predict(similarity)
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(clusters)))
library(tidyverse)
data2 <- rbind(tibble(r=rnorm(100, 3, 0.8),
th=rnorm(100, 3, 0.1)),
tibble(r=rnorm(100, 0, 1.2),
th=rnorm(100, 3*pi/2, 0.1)),
tibble(r=rnorm(400, 6, 0.5),
th=runif(400, 0, 2*pi))) %>%
transmute(x=r*cos(th),y=r*sin(th));
ggplot(data2, aes(x,y)) + geom_point()
library(rdist);
distances <- pdist(data2);
ggplot(distances[upper.tri(distances)] %>% as_tibble(), aes(value)) +
geom_density();
distanceslist <- as.tibble(distances[upper.tri(distances)])
ggplot(distanceslist, aes(V1)) + geom_density()
View(distanceslist)
ggplot(distanceslist, aes(value)) + geom_density()
similarity <- 1*(distances < 2)
cluster <- import("sklearn.cluster")
sc <- cluster$SpectralClustering(n_clusters=as.integer(3), affinity="precomputed")
clusters <- sc$fit_predict(similarity)
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(clusters)))
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(sc_label)))
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(cluster)))
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(clusters)))
cluster <- import("sklearn.cluster")
sc <- cluster$SpectralClustering(n_clusters=as.integer(3), affinity="precomputed")
clusters <- sc$fit_predict(similarity)
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(clusters)))
cluster <- import("sklearn.cluster")
sc <- cluster$SpectralClustering(n_clusters=as.integer(3), affinity="precomputed")
clusters <- sc$fit_predict(similarity)
ggplot(data2, aes(x,y)) + geom_point(aes(colour=factor(clusters)))
library(tidyverse)
library(matlab)
library(pROC)
# select <- dplyr::select
characters <- read_csv("https://github.com/Vincent-Toups/datasci611/raw/main/lectures/12-classification/source_data/prime_earth_characters.csv")%>% distinct()
powers <- read_csv("https://github.com/Vincent-Toups/datasci611/raw/main/lectures/12-classification/source_data/prime_earth_powers.csv") %>% distinct()
powers_wide <- pivot_wider(powers, id_cols = c("character", "universe"), names_from = "power", values_from = "power", values_fill = 0, values_fn = function(x){1})
pca_results <- prcomp(powers_wide %>% select(-character, -universe) %>% as.matrix())
power_projection <- pca_results$x %>% as_tibble() %>% select(PC1:PC6) %>% mutate(character = powers_wide$character, universe = powers_wide$universe) %>% inner_join(characters %>% filter(property_name == "gender" & value %in% c("male", "female")) %>% transmute(character = character, universe = universe, male = 1 * (value == "male")), by = c("character", "universe")) %>% mutate(train=runif(nrow(.)<0.75))
power_projection <- pca_results$x %>% as_tibble() %>% select(PC1:PC6) %>% mutate(character = powers_wide$character, universe = powers_wide$universe) %>% inner_join(characters %>% filter(property_name == "gender" & value %in% c("male", "female")) %>% transmute(character = character, universe = universe, male = 1 * (value == "male")), by = c("character", "universe")) %>% mutate(train=runif(nrow(.))<0.75)
power_train <- power_projection %>% filter(train) %>% select(-train)
power_test <- power_projection %>% filter(!train) %>% select(-train)
model <- glm(male ~ PPC1 + PC2 + PC3 + PC4 + PC5 + PC6, family=binomial, data=power_train)
model <- glm(male ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, family=binomial, data=power_train)
power_test$male_p <- predict(model, newdata = power_test, type = "respose")
power_test$male_p <- predict(model, newdata = power_test, type = "respose")
power_test$male_p <- predict(model, newdata = power_test, type = "respose")
model <- glm(male ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, family=binomial, data=power_train)
power_test$male_p <- predict(model, newdata = power_test, type = "respose")
power_test$male_p <- predict(model, newdata = power_test, type = "response")
roc_object <- roc(power_test$male, power_test$male_p)
plot(roc_object)
power_test$male_p <- predict(model, newdata = power_test, type = "response")
roc_object <- roc(power_test$male, power_test$male_p)
plot(roc_object)
model <- glm(male ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, family=binomial, data=power_train)
summary(model)
powers_wide_aug <- powers_wide %>% inner_join(characters %>% filter(property_name=="gender" & value %in% c("male", "female")) %>% transmute(character = character, unverse = universe, male = 1*(value=="male")), by=c("character", "universe"))
powers_wide_aug <- powers_wide %>% inner_join(characters %>% filter(property_name=="gender" & value %in% c("male", "female")) %>% transmute(character = character, universe = universe, male = 1*(value=="male")), by=c("character", "universe"))
f <- formula(sprintf("male ~ %s", powers_wide_aug %>% select(accelerated_healing:zombie_physiology) %>% names() %>% paste(collapse = " + ")))
train <- runif(nrow(powers_wide_aug)) < 0.75
gbm_model <- gbm(f, data=powers_wide_aug %>% dplyr::filter(train))
library(gbm)
gbm_model <- gbm(f, data=powers_wide_aug %>% dplyr::filter(train))
test <- powers_wide_aug %>% dplyr::filter(train)
gbm_model <- gbm(f, data=powers_wide_aug %>% dplyr::filter(train))
test <- powers_wide_aug %>% dplyr::filter(train)
test$male_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(!train))
test$male_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(train))
roc_info <- roc(test$male, test$male_p)
plot(roc_info)
powers_wide_aug <- powers_wide %>% inner_join(characters %>% filter(property_name=="gender") %>% transmute(character = character, universe = universe, traditional_gender = ifelse(value %in% c("male", "female"),1 ,0)), by=c("character", "universe"))
f <- formula(sprintf("traditional_gender ~ %s", powers_wide_aug %>% select(accelerated_healing:zombie_physiology) %>% names() %>% paste(collapse = " + ")))
powers_wide_aug <- powers_wide %>% inner_join(characters %>% filter(property_name=="gender") %>% transmute(character = character, universe = universe, traditional_gender = ifelse(value %in% c("male", "female"),1 ,0)), by=c("character", "universe"))
f <- formula(sprintf("traditional_gender ~ %s", powers_wide_aug %>% select(accelerated_healing:zombie_physiology) %>% names() %>% paste(collapse = " + ")))
train <- runif(nrow(powers_wide_aug)) < 0.75
gbm_model <- gbm(f, data=powers_wide_aug %>% dplyr::filter(train))
test <- powers_wide_aug %>% dplyr::filter(train)
test$traditional_gender_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(!train))
powers_wide_aug <- powers_wide %>% inner_join(characters %>% filter(property_name=="gender") %>% transmute(character = character, universe = universe, traditional_gender = ifelse(value %in% c("male", "female"),1 ,0)), by=c("character", "universe"))
f <- formula(sprintf("traditional_gender ~ %s", powers_wide_aug %>% select(accelerated_healing:zombie_physiology) %>% names() %>% paste(collapse = " + ")))
train <- runif(nrow(powers_wide_aug)) < 0.75
gbm_model <- gbm(f, data=powers_wide_aug %>% dplyr::filter(train))
test <- powers_wide_aug %>% dplyr::filter(train)
test$traditional_gender_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(train))
roc_info <- roc(test$male, test$traditional_gender_p)
test$traditional_gender_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(!train))
traditional_gender_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(!train))
roc_info <- roc(test$male, traditional_gender_p)
test$
roc_info <- roc(test$male, test$traditional_gender_p)
test$traditional_gender_p <- predict(gbm_model, newdata = powers_wide_aug %>% dplyr::filter(!train))
setwd("~/bios-611-project")
formatdata <- function(df) {
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature)
return(df)
}
library(tidyverse)
library(rnoaa)
getdata <- function(id, years) {
i <- years[1]
df_total = data.frame()
for (i in years) {
df <- buoy(dataset = "stdmet", buoyid = id,  year = i)
df <- data.frame(df$data)
df_total <- rbind(df_total,df)
}
return(df_total)
}
formatdata <- function(df) {
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature)
return(df)
}
getdate <- function(df) {
df$datetime <- as.POSIXct(df$datetime, format = "%Y-%m-%d %H:%M:%S")
df$date <-  as.Date(as.character(as.POSIXct(df$datetime, format = "%Y-%m-%d")))
return(df)
}
mytheme <- function() {
theme(plot.title = element_text(size = 11, face = "bold"), panel.background = element_blank(), axis.line = element_line(colour = "black"), panel.grid.minor=element_line(colour="gray"))
}
library(tidyverse)
source("utils.R")
chraw <- getdata("HCGN7", 2016:2021)
write.csv(chraw, "sourcedata/chraw.csv")
duckraw <- getdata("DUKN7", 2016:2021)
write.csv(duckraw, "sourcedata/duckraw.csv")
beaufraw <- getdata("BFTN7", 2016:2021)
write.csv(beaufraw, "sourcedata/beaufraw.csv")
rawfiles <- list.files(path = "./sourcedata", pattern = "*.csv")
for (i in 1:length(rawfiles)) {
df <- read.csv(paste0("./sourcedata/", rawfiles[i]))
df <- formatdata(df)
write.csv(df, paste0("./deriveddata/", gsub('raw.csv', 'processed.csv', rawfiles[i])))
}
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature)
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature)
df <- beaufraw
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature)
View(df)
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>%
group_by(date) %>%
summarize(av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
df <- beaufraw
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>%
group_by(date) %>%
summarize(av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
?mean
View(df)
df <- beafraw
df <- beaufraw
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>% drop_na() %>%
group_by(date) %>%
summarize(av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
View(df)
rawfiles <- list.files(path = "./sourcedata", pattern = "*.csv")
for (i in 1:length(rawfiles)) {
df <- read.csv(paste0("./sourcedata/", rawfiles[i]))
df <- formatdata(df)
write.csv(df, paste0("./deriveddata/", gsub('raw.csv', 'processed.csv', rawfiles[i])))
}
library(tidyverse)
library(rnoaa)
getdata <- function(id, years) {
i <- years[1]
df_total = data.frame()
for (i in years) {
df <- buoy(dataset = "stdmet", buoyid = id,  year = i)
df <- data.frame(df$data)
df_total <- rbind(df_total,df)
}
return(df_total)
}
formatdata <- function(df) {
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>% drop_na() %>%
group_by(date) %>%
summarize(av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
return(df)
}
getdate <- function(df) {
df$datetime <- as.POSIXct(df$datetime, format = "%Y-%m-%d %H:%M:%S")
df$date <-  as.Date(as.character(as.POSIXct(df$datetime, format = "%Y-%m-%d")))
return(df)
}
mytheme <- function() {
theme(plot.title = element_text(size = 11, face = "bold"), panel.background = element_blank(), axis.line = element_line(colour = "black"), panel.grid.minor=element_line(colour="gray"))
}
library(tidyverse)
source("utils.R")
rawfiles <- list.files(path = "./sourcedata", pattern = "*.csv")
for (i in 1:length(rawfiles)) {
df <- read.csv(paste0("./sourcedata/", rawfiles[i]))
df <- formatdata(df)
write.csv(df, paste0("./deriveddata/", gsub('raw.csv', 'processed.csv', rawfiles[i])))
}
library(tidyverse)
source("utils.R")
prettynames <- c("Beaufort", "Cape Hatteras", "Duck")
names <- c("beauf", "ch", "duck")
processedfiles <- list.files(path = "./deriveddata", pattern = "*.csv")
data <- list()
for (i in 1:length(processedfiles)) {
df <- read.csv(paste0("./deriveddata/", processedfiles[i]))
df <- getdate(df)
assign(gsub('processed.csv', '', processedfiles[i]), df)
data[[i]] <- get(names[i])
names(data)[i] <- names[i]
}
library(tidyverse)
source("utils.R")
processedfiles <- list.files(path = "./deriveddata", pattern = "*.csv")
for (i in 1:length(processedfiles)) {
df <- read.csv(paste0("./deriveddata/", processedfiles[i]))
df <- getdate(df)
assign(gsub('processed.csv', '', processedfiles[i]), df)
data[[i]] <- get(names[i])
names(data)[i] <- names[i]
}
assign(gsub('processed.csv', '', processedfiles[i]), df)
data[[i]] <- get(names[i])
names(data)[i] <- names[i]
df <- beaufraw
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>% drop_na() %>%
group_by(date) %>%
mutate(av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
View(df)
df <- beaufraw
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>% drop_na() %>%
group_by(date) %>%
summarize(date = date, lat = lat, lon = lon, av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
View(df)
df <- beaufraw
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>% drop_na() %>%
group_by(date) %>%
summarize(date = mean(date), lat = mean(lat), lon = mean(lon), av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
View(df)
library(tidyverse)
library(rnoaa)
getdata <- function(id, years) {
i <- years[1]
df_total = data.frame()
for (i in years) {
df <- buoy(dataset = "stdmet", buoyid = id,  year = i)
df <- data.frame(df$data)
df_total <- rbind(df_total,df)
}
return(df_total)
}
formatdata <- function(df) {
df <- df %>% mutate(datetime = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%SZ"), date = as.POSIXct(time, format = "%Y-%m-%d")) %>% select(datetime, date, lat, lon, wind_dir, wind_spd, gust, air_pressure, air_temperature, sea_surface_temperature) %>% drop_na() %>%
group_by(date) %>%
summarize(date = mean(date), lat = mean(lat), lon = mean(lon), av_wind_dir = mean(wind_dir), av_wind_spd = mean(wind_spd), av_gust = mean(gust), av_air_pressure = mean(air_pressure), av_air_temp = mean(air_temperature), av_ss_temp = mean(sea_surface_temperature))
return(df)
}
getdate <- function(df) {
df$datetime <- as.POSIXct(df$datetime, format = "%Y-%m-%d %H:%M:%S")
df$date <-  as.Date(as.character(as.POSIXct(df$datetime, format = "%Y-%m-%d")))
return(df)
}
mytheme <- function() {
theme(plot.title = element_text(size = 11, face = "bold"), panel.background = element_blank(), axis.line = element_line(colour = "black"), panel.grid.minor=element_line(colour="gray"))
}
rawfiles <- list.files(path = "./sourcedata", pattern = "*.csv")
for (i in 1:length(rawfiles)) {
df <- read.csv(paste0("./sourcedata/", rawfiles[i]))
df <- formatdata(df)
write.csv(df, paste0("./deriveddata/", gsub('raw.csv', 'processed.csv', rawfiles[i])))
}
library(tidyverse)
source("utils.R")
prettynames <- c("Beaufort", "Cape Hatteras", "Duck")
names <- c("beauf", "ch", "duck")
processedfiles <- list.files(path = "./deriveddata", pattern = "*.csv")
data <- list()
for (i in 1:length(processedfiles)) {
df <- read.csv(paste0("./deriveddata/", processedfiles[i]))
df <- getdate(df)
assign(gsub('processed.csv', '', processedfiles[i]), df)
data[[i]] <- get(names[i])
names(data)[i] <- names[i]
}
processedfiles <- list.files(path = "./deriveddata", pattern = "*.csv")
data <- list()
df <- read.csv(paste0("./deriveddata/", processedfiles[i]))
df <- getdate(df)
/getdate
getdate <- function(df) {
df$date <-  as.Date(as.character(as.POSIXct(df$datetime, format = "%Y-%m-%d")))
return(df)
}
for (i in 1:length(processedfiles)) {
df <- read.csv(paste0("./deriveddata/", processedfiles[i]))
df <- getdate(df)
assign(gsub('processed.csv', '', processedfiles[i]), df)
data[[i]] <- get(names[i])
names(data)[i] <- names[i]
}
df <- getdate(df)
View(df)
df$date <-  as.Date(as.character(as.POSIXct(df$datetime, format = "%Y-%m-%d")))
df$date <- as.Date(as.character(as.POSIXct(df$date, format = "%Y-%m-%d")))
getdate <- function(df) {
df$date <- as.Date(as.character(as.POSIXct(df$date, format = "%Y-%m-%d")))
return(df)
}
processedfiles <- list.files(path = "./deriveddata", pattern = "*.csv")
data <- list()
for (i in 1:length(processedfiles)) {
df <- read.csv(paste0("./deriveddata/", processedfiles[i]))
df <- getdate(df)
assign(gsub('processed.csv', '', processedfiles[i]), df)
data[[i]] <- get(names[i])
names(data)[i] <- names[i]
}
for (i in 1:length(data)) {
ggplot() + geom_point(data = data[[i]], mapping = aes(x = date, y = sea_surface_temperature)) + ggtitle(paste0(prettynames[i], " Sea Surface Temperature"))
ggsave(paste0("./figures/", names[i], "sstpoint.png"))
}
for (i in 1:length(data)) {
ggplot() + geom_point(data = data[[i]], mapping = aes(x = date, y = av_ss_temp)) + ggtitle(paste0(prettynames[i], " Sea Surface Temperature"))
ggsave(paste0("./figures/", names[i], "sstpoint.png"))
}
for (i in 1:length(data)) {
ggplot(data = data[[i]], mapping = aes(x = date, y = av_ss_temp)) + geom_point(size=0.5) + stat_smooth(method = "lm", col = "blue") + ggtitle(paste0(prettynames[i], " Sea Surface Temperature Linear Model")) + xlab("Date") + ylab("Sea Surface Temperature") + mytheme()
ggsave(paste0("./figures/", names[i], "sstglm.png"), width = 8, height = 6, units = "in")
}
